// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: CK5Roq2dBGcRPqc72xPE7
// Component: Wd8YFq2Y_h
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NewsCard from "../../NewsCard"; // plasmic-import: -6FXQIV15U/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cfund_landing_page.module.css"; // plasmic-import: CK5Roq2dBGcRPqc72xPE7/projectcss
import sty from "./PlasmicNewsSection.module.css"; // plasmic-import: Wd8YFq2Y_h/css

export type PlasmicNewsSection__VariantMembers = {};

export type PlasmicNewsSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewsSection__VariantsArgs;
export const PlasmicNewsSection__VariantProps = new Array<VariantPropType>();

export type PlasmicNewsSection__ArgsType = {};
type ArgPropType = keyof PlasmicNewsSection__ArgsType;
export const PlasmicNewsSection__ArgProps = new Array<ArgPropType>();

export type PlasmicNewsSection__OverridesType = {
  root?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  freeBox?: p.Flex<"div">;
  item?: p.Flex<"div">;
  item2?: p.Flex<"div">;
  item3?: p.Flex<"div">;
  item4?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNewsSectionProps {
  className?: string;
}

function PlasmicNewsSection__RenderFunc(props: {
  variants: PlasmicNewsSection__VariantsArgs;
  args: PlasmicNewsSection__ArgsType;
  overrides: PlasmicNewsSection__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h1
        data-plasmic-name={"h1"}
        data-plasmic-override={overrides.h1}
        className={classNames(
          projectcss.all,
          projectcss.h1,
          projectcss.__wab_text,
          sty.h1
        )}
      >
        {"News & Article"}
      </h1>

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"item"}
          data-plasmic-override={overrides.item}
          className={classNames(projectcss.all, sty.item)}
        >
          <NewsCard
            className={classNames("__wab_instance", sty.newsCard__sDhGj)}
          />
        </div>

        <div
          data-plasmic-name={"item2"}
          data-plasmic-override={overrides.item2}
          className={classNames(projectcss.all, sty.item2)}
        >
          <NewsCard
            className={classNames("__wab_instance", sty.newsCard___2E64A)}
          />
        </div>

        <div
          data-plasmic-name={"item3"}
          data-plasmic-override={overrides.item3}
          className={classNames(projectcss.all, sty.item3)}
        >
          <NewsCard
            className={classNames("__wab_instance", sty.newsCard__wzFiK)}
          />
        </div>

        <div
          data-plasmic-name={"item4"}
          data-plasmic-override={overrides.item4}
          className={classNames(projectcss.all, sty.item4)}
        >
          <NewsCard
            className={classNames("__wab_instance", sty.newsCard__ubZoR)}
          />
        </div>
      </div>

      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link
        )}
        component={Link}
        href={"/" as const}
        platform={"nextjs"}
      >
        {"See All News"}
      </p.PlasmicLink>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "freeBox", "item", "item2", "item3", "item4", "link"],
  h1: ["h1"],
  freeBox: ["freeBox", "item", "item2", "item3", "item4"],
  item: ["item"],
  item2: ["item2"],
  item3: ["item3"],
  item4: ["item4"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  h1: "h1";
  freeBox: "div";
  item: "div";
  item2: "div";
  item3: "div";
  item4: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsSection__VariantsArgs;
    args?: PlasmicNewsSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewsSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewsSection__ArgProps,
          internalVariantPropNames: PlasmicNewsSection__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewsSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsSection";
  } else {
    func.displayName = `PlasmicNewsSection.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsSection = Object.assign(
  // Top-level PlasmicNewsSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    freeBox: makeNodeComponent("freeBox"),
    item: makeNodeComponent("item"),
    item2: makeNodeComponent("item2"),
    item3: makeNodeComponent("item3"),
    item4: makeNodeComponent("item4"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicNewsSection
    internalVariantProps: PlasmicNewsSection__VariantProps,
    internalArgProps: PlasmicNewsSection__ArgProps
  }
);

export default PlasmicNewsSection;
/* prettier-ignore-end */
