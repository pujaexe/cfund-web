// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: CK5Roq2dBGcRPqc72xPE7
// Component: vt5GMNbvKS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cfund_landing_page.module.css"; // plasmic-import: CK5Roq2dBGcRPqc72xPE7/projectcss
import sty from "./PlasmicPeformanceSection.module.css"; // plasmic-import: vt5GMNbvKS/css

export type PlasmicPeformanceSection__VariantMembers = {};

export type PlasmicPeformanceSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicPeformanceSection__VariantsArgs;
export const PlasmicPeformanceSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPeformanceSection__ArgsType = {};
type ArgPropType = keyof PlasmicPeformanceSection__ArgsType;
export const PlasmicPeformanceSection__ArgProps = new Array<ArgPropType>();

export type PlasmicPeformanceSection__OverridesType = {
  root?: p.Flex<"section">;
  columns?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  text?: p.Flex<"div">;
};

export interface DefaultPeformanceSectionProps {
  className?: string;
}

function PlasmicPeformanceSection__RenderFunc(props: {
  variants: PlasmicPeformanceSection__VariantsArgs;
  args: PlasmicPeformanceSection__ArgsType;
  overrides: PlasmicPeformanceSection__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__k4J02)}>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          />
        </div>

        <div className={classNames(projectcss.all, sty.column__yRy0K)}>
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Our Peformance"}
          </h1>

          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "Our advanced risk management strategy allowed us to be consistently profitable during both uptrend and downtrend.\nDigital assets such can provide highly lucrative return, yet they are much more volatile and possess higher risk compared to traditional asset classes. CFund manages your capital with rigorous position sizing, advanced trading strategy, and a conservative stop loss."
            }
          </div>
        </div>
      </p.Stack>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "freeBox", "h1", "text"],
  columns: ["columns", "freeBox", "h1", "text"],
  freeBox: ["freeBox"],
  h1: ["h1"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  columns: "div";
  freeBox: "div";
  h1: "h1";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPeformanceSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPeformanceSection__VariantsArgs;
    args?: PlasmicPeformanceSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPeformanceSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPeformanceSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPeformanceSection__ArgProps,
          internalVariantPropNames: PlasmicPeformanceSection__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPeformanceSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPeformanceSection";
  } else {
    func.displayName = `PlasmicPeformanceSection.${nodeName}`;
  }
  return func;
}

export const PlasmicPeformanceSection = Object.assign(
  // Top-level PlasmicPeformanceSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPeformanceSection
    internalVariantProps: PlasmicPeformanceSection__VariantProps,
    internalArgProps: PlasmicPeformanceSection__ArgProps
  }
);

export default PlasmicPeformanceSection;
/* prettier-ignore-end */
