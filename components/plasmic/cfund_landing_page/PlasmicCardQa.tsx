// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: CK5Roq2dBGcRPqc72xPE7
// Component: Jgzn7LQkpI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import QaExpand from "../../QaExpand"; // plasmic-import: Kp3Vy8I_6u/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cfund_landing_page.module.css"; // plasmic-import: CK5Roq2dBGcRPqc72xPE7/projectcss
import sty from "./PlasmicCardQa.module.css"; // plasmic-import: Jgzn7LQkpI/css

import DownCevronsvgIcon from "./icons/PlasmicIcon__DownCevronsvg"; // plasmic-import: CMZqPb-CKw/icon

export type PlasmicCardQa__VariantMembers = {
  isExpand: "isExpand";
};

export type PlasmicCardQa__VariantsArgs = {
  isExpand?: SingleBooleanChoiceArg<"isExpand">;
};

type VariantPropType = keyof PlasmicCardQa__VariantsArgs;
export const PlasmicCardQa__VariantProps = new Array<VariantPropType>(
  "isExpand"
);

export type PlasmicCardQa__ArgsType = {};
type ArgPropType = keyof PlasmicCardQa__ArgsType;
export const PlasmicCardQa__ArgProps = new Array<ArgPropType>();

export type PlasmicCardQa__OverridesType = {
  root?: p.Flex<"div">;
  triger?: p.Flex<"button">;
  h6?: p.Flex<"h6">;
  svg?: p.Flex<"svg">;
  qaExpand?: p.Flex<typeof QaExpand>;
};

export interface DefaultCardQaProps {
  isExpand?: SingleBooleanChoiceArg<"isExpand">;
  className?: string;
}

function PlasmicCardQa__RenderFunc(props: {
  variants: PlasmicCardQa__VariantsArgs;
  args: PlasmicCardQa__ArgsType;
  overrides: PlasmicCardQa__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisExpand]: hasVariant(variants, "isExpand", "isExpand") }
      )}
    >
      {true ? (
        <button
          data-plasmic-name={"triger"}
          data-plasmic-override={overrides.triger}
          className={classNames(projectcss.all, projectcss.button, sty.triger, {
            [sty.trigerisExpand]: hasVariant(variants, "isExpand", "isExpand")
          })}
        >
          <h6
            data-plasmic-name={"h6"}
            data-plasmic-override={overrides.h6}
            className={classNames(
              projectcss.all,
              projectcss.h6,
              projectcss.__wab_text,
              sty.h6
            )}
          >
            {"How To Register account on Cfund"}
          </h6>

          <DownCevronsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svgisExpand]: hasVariant(variants, "isExpand", "isExpand")
            })}
            role={"img"}
          />
        </button>
      ) : null}
      {(hasVariant(variants, "isExpand", "isExpand") ? true : true) ? (
        <QaExpand
          data-plasmic-name={"qaExpand"}
          data-plasmic-override={overrides.qaExpand}
          className={classNames("__wab_instance", sty.qaExpand, {
            [sty.qaExpandisExpand]: hasVariant(variants, "isExpand", "isExpand")
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "triger", "h6", "svg", "qaExpand"],
  triger: ["triger", "h6", "svg"],
  h6: ["h6"],
  svg: ["svg"],
  qaExpand: ["qaExpand"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  triger: "button";
  h6: "h6";
  svg: "svg";
  qaExpand: typeof QaExpand;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardQa__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardQa__VariantsArgs;
    args?: PlasmicCardQa__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardQa__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardQa__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardQa__ArgProps,
          internalVariantPropNames: PlasmicCardQa__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCardQa__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardQa";
  } else {
    func.displayName = `PlasmicCardQa.${nodeName}`;
  }
  return func;
}

export const PlasmicCardQa = Object.assign(
  // Top-level PlasmicCardQa renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    triger: makeNodeComponent("triger"),
    h6: makeNodeComponent("h6"),
    svg: makeNodeComponent("svg"),
    qaExpand: makeNodeComponent("qaExpand"),

    // Metadata about props expected for PlasmicCardQa
    internalVariantProps: PlasmicCardQa__VariantProps,
    internalArgProps: PlasmicCardQa__ArgProps
  }
);

export default PlasmicCardQa;
/* prettier-ignore-end */
