// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: CK5Roq2dBGcRPqc72xPE7
// Component: Q4DFql2orP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cfund_landing_page.module.css"; // plasmic-import: CK5Roq2dBGcRPqc72xPE7/projectcss
import sty from "./PlasmicPartner.module.css"; // plasmic-import: Q4DFql2orP/css

export type PlasmicPartner__VariantMembers = {};

export type PlasmicPartner__VariantsArgs = {};
type VariantPropType = keyof PlasmicPartner__VariantsArgs;
export const PlasmicPartner__VariantProps = new Array<VariantPropType>();

export type PlasmicPartner__ArgsType = {
  html?: string;
};

type ArgPropType = keyof PlasmicPartner__ArgsType;
export const PlasmicPartner__ArgProps = new Array<ArgPropType>("html");

export type PlasmicPartner__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPartnerProps {
  html?: string;
  className?: string;
}

function PlasmicPartner__RenderFunc(props: {
  variants: PlasmicPartner__VariantsArgs;
  args: PlasmicPartner__ArgsType;
  overrides: PlasmicPartner__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__ohojw)}
        displayHeight={"50px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image4.png",
          fullWidth: 2218,
          fullHeight: 2098,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__gluvd)}
        displayHeight={"15px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image5.png",
          fullWidth: 2876,
          fullHeight: 404,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__mWTeO)}
        displayHeight={"50px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image6.png",
          fullWidth: 2209,
          fullHeight: 2593,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__b7NmQ)}
        displayHeight={"20px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image7.png",
          fullWidth: 509,
          fullHeight: 91,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__fbqKf)}
        displayHeight={"32px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image8.png",
          fullWidth: 176,
          fullHeight: 42,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__o7Wo)}
        displayHeight={"32px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image9.png",
          fullWidth: 188,
          fullHeight: 44,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__u3RBm)}
        displayHeight={"20px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/raizColourLogoNotmsvg.svg",
          fullWidth: 300,
          fullHeight: 89,
          aspectRatio: 3.362832
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__xz8SQ)}
        displayHeight={"50px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image10.png",
          fullWidth: 945,
          fullHeight: 591,
          aspectRatio: undefined
        }}
      />

      <p.PlasmicImg
        alt={""}
        className={classNames(sty.img__frZdu)}
        displayHeight={"20px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/cfund_landing_page/images/image11.png",
          fullWidth: 300,
          fullHeight: 46,
          aspectRatio: undefined
        }}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPartner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPartner__VariantsArgs;
    args?: PlasmicPartner__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPartner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPartner__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPartner__ArgProps,
          internalVariantPropNames: PlasmicPartner__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPartner__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartner";
  } else {
    func.displayName = `PlasmicPartner.${nodeName}`;
  }
  return func;
}

export const PlasmicPartner = Object.assign(
  // Top-level PlasmicPartner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPartner
    internalVariantProps: PlasmicPartner__VariantProps,
    internalArgProps: PlasmicPartner__ArgProps
  }
);

export default PlasmicPartner;
/* prettier-ignore-end */
