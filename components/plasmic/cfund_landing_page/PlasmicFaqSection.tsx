// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: CK5Roq2dBGcRPqc72xPE7
// Component: nzY669KIVI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cfund_landing_page.module.css"; // plasmic-import: CK5Roq2dBGcRPqc72xPE7/projectcss
import sty from "./PlasmicFaqSection.module.css"; // plasmic-import: nzY669KIVI/css

import DownCevronsvgIcon from "./icons/PlasmicIcon__DownCevronsvg"; // plasmic-import: CMZqPb-CKw/icon

export type PlasmicFaqSection__VariantMembers = {};

export type PlasmicFaqSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaqSection__VariantsArgs;
export const PlasmicFaqSection__VariantProps = new Array<VariantPropType>();

export type PlasmicFaqSection__ArgsType = {};
type ArgPropType = keyof PlasmicFaqSection__ArgsType;
export const PlasmicFaqSection__ArgProps = new Array<ArgPropType>();

export type PlasmicFaqSection__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  cardQa?: p.Flex<"div">;
  cardQa2?: p.Flex<"div">;
  cardQa3?: p.Flex<"div">;
  cardQa4?: p.Flex<"div">;
  cardQa5?: p.Flex<"div">;
  cardQa6?: p.Flex<"div">;
};

export interface DefaultFaqSectionProps {
  className?: string;
}

function PlasmicFaqSection__RenderFunc(props: {
  variants: PlasmicFaqSection__VariantsArgs;
  args: PlasmicFaqSection__ArgsType;
  overrides: PlasmicFaqSection__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dLpc)}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          {"Need more information?"}
        </h1>

        <div className={classNames(projectcss.all, sty.freeBox__rpKl)}>
          <div className={classNames(projectcss.all, sty.freeBox___66Gzg)}>
            <div
              data-plasmic-name={"cardQa"}
              data-plasmic-override={overrides.cardQa}
              className={classNames(projectcss.all, sty.cardQa)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__npkJb
                )}
              >
                {"How To Register account on Cfund"}
              </div>

              <DownCevronsvgIcon
                className={classNames(projectcss.all, sty.svg__xNEib)}
                role={"img"}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__eLdUl)}>
            <div
              data-plasmic-name={"cardQa2"}
              data-plasmic-override={overrides.cardQa2}
              className={classNames(projectcss.all, sty.cardQa2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__i1HB
                )}
              >
                {"How To Register account on Cfund"}
              </div>

              <DownCevronsvgIcon
                className={classNames(projectcss.all, sty.svg___2X5Mr)}
                role={"img"}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__c3Rp6)}>
            <div
              data-plasmic-name={"cardQa3"}
              data-plasmic-override={overrides.cardQa3}
              className={classNames(projectcss.all, sty.cardQa3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kZ3G
                )}
              >
                {"How To Register account on Cfund"}
              </div>

              <DownCevronsvgIcon
                className={classNames(projectcss.all, sty.svg___2SuCa)}
                role={"img"}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__nb9Tk)}>
            <div
              data-plasmic-name={"cardQa4"}
              data-plasmic-override={overrides.cardQa4}
              className={classNames(projectcss.all, sty.cardQa4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gNUvk
                )}
              >
                {"How To Register account on Cfund"}
              </div>

              <DownCevronsvgIcon
                className={classNames(projectcss.all, sty.svg___1Db9I)}
                role={"img"}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___1RDQ)}>
            <div
              data-plasmic-name={"cardQa5"}
              data-plasmic-override={overrides.cardQa5}
              className={classNames(projectcss.all, sty.cardQa5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lgcMr
                )}
              >
                {"How To Register account on Cfund"}
              </div>

              <DownCevronsvgIcon
                className={classNames(projectcss.all, sty.svg__y4X72)}
                role={"img"}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__e8Y9)}>
            <div
              data-plasmic-name={"cardQa6"}
              data-plasmic-override={overrides.cardQa6}
              className={classNames(projectcss.all, sty.cardQa6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fhC3B
                )}
              >
                {"How To Register account on Cfund"}
              </div>

              <DownCevronsvgIcon
                className={classNames(projectcss.all, sty.svg__eI104)}
                role={"img"}
              />
            </div>
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "cardQa",
    "cardQa2",
    "cardQa3",
    "cardQa4",
    "cardQa5",
    "cardQa6"
  ],
  h1: ["h1"],
  cardQa: ["cardQa"],
  cardQa2: ["cardQa2"],
  cardQa3: ["cardQa3"],
  cardQa4: ["cardQa4"],
  cardQa5: ["cardQa5"],
  cardQa6: ["cardQa6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  cardQa: "div";
  cardQa2: "div";
  cardQa3: "div";
  cardQa4: "div";
  cardQa5: "div";
  cardQa6: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaqSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaqSection__VariantsArgs;
    args?: PlasmicFaqSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaqSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaqSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaqSection__ArgProps,
          internalVariantPropNames: PlasmicFaqSection__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFaqSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqSection";
  } else {
    func.displayName = `PlasmicFaqSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqSection = Object.assign(
  // Top-level PlasmicFaqSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    cardQa: makeNodeComponent("cardQa"),
    cardQa2: makeNodeComponent("cardQa2"),
    cardQa3: makeNodeComponent("cardQa3"),
    cardQa4: makeNodeComponent("cardQa4"),
    cardQa5: makeNodeComponent("cardQa5"),
    cardQa6: makeNodeComponent("cardQa6"),

    // Metadata about props expected for PlasmicFaqSection
    internalVariantProps: PlasmicFaqSection__VariantProps,
    internalArgProps: PlasmicFaqSection__ArgProps
  }
);

export default PlasmicFaqSection;
/* prettier-ignore-end */
